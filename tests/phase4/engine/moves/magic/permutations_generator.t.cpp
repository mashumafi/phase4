#include <phase4/engine/moves/magic/permutations_generator.h>

#include <phase4/engine/common/bitset.h>

#include <doctest/doctest.h>

TEST_CASE("PermutationsGenerator getPermutation") {
	using namespace phase4::engine::moves::magic;
	using namespace phase4::engine::common;

	CHECK(PermutationsGenerator::getPermutation(0b1101, 0) == 0b0000);
	CHECK(PermutationsGenerator::getPermutation(0b1101, 1) == 0b0001);
	CHECK(PermutationsGenerator::getPermutation(0b1101, 2) == 0b0100);
	CHECK(PermutationsGenerator::getPermutation(0b1101, 3) == 0b0101);
	CHECK(PermutationsGenerator::getPermutation(0b1101, 4) == 0b1000);
	CHECK(PermutationsGenerator::getPermutation(0b1101, 5) == 0b1001);
	CHECK(PermutationsGenerator::getPermutation(0b1101, 6) == 0b1100);
	CHECK(PermutationsGenerator::getPermutation(0b1101, 7) == 0b1101);
	CHECK(PermutationsGenerator::getPermutation(0b1101, 8) == 0b0000);

	//                                            ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH          ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
	//                                            88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111          88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
	CHECK(PermutationsGenerator::getPermutation(0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000, 0) == 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000);
	CHECK(PermutationsGenerator::getPermutation(0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000, 1) == 0b00010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000);
	CHECK(PermutationsGenerator::getPermutation(0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000, 2) == 0b01000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000);
	CHECK(PermutationsGenerator::getPermutation(0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000, 3) == 0b01010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000);
	CHECK(PermutationsGenerator::getPermutation(0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000, 4) == 0b10000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000);
	CHECK(PermutationsGenerator::getPermutation(0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000, 5) == 0b10010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000);
	CHECK(PermutationsGenerator::getPermutation(0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000, 6) == 0b11000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000);
	CHECK(PermutationsGenerator::getPermutation(0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000, 7) == 0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000);
	CHECK(PermutationsGenerator::getPermutation(0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000, 8) == 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000);

	CHECK(PermutationsGenerator::getPermutation(0b10000000'01000000'00100000'00010000'00001000'00000100'00000010'00000001, 0b11010000'00000000'00000000'00000000'00000000'00000000'00000000'11111111) == 0b10000000'01000000'00100000'00010000'00001000'00000100'00000010'00000001);
	CHECK(PermutationsGenerator::getPermutation(0b10000001'01000010'00100100'00011000'00011000'00100100'01000010'10000001, 0b11010000'00000000'00000000'00000000'00000000'00000000'11111111'11111111) == 0b10000001'01000010'00100100'00011000'00011000'00100100'01000010'10000001);
	CHECK(PermutationsGenerator::getPermutation(0b10100001'01010010'00100101'00011010'00011010'10100100'01000010'10010001, 0b11010000'00000000'00000000'00000000'00000000'11111111'11111111'11111111) == 0b10100001'01010010'00100101'00011010'00011010'10100100'01000010'10010001);
	CHECK(PermutationsGenerator::getPermutation(0b10100011'01010110'00101101'00111010'00111010'10110100'01000110'10011001, 0b11010000'00000000'00000000'00000000'11111111'11111111'11111111'11111111) == 0b10100011'01010110'00101101'00111010'00111010'10110100'01000110'10011001);
}
