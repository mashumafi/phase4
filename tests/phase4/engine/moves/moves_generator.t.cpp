#include <phase4/engine/moves/moves_generator.h>

#include <phase4/engine/common/square.h>

#include <doctest/doctest.h>

namespace {
constexpr uint64_t m1 = 0b0011101000100110010001110011010101001100101100101011110000101011;
constexpr uint64_t m2 = 0b1010011011011011011011111111101000010101101001011100010111011100;

constexpr phase4::engine::common::Bitboard EMPTY_BOARD(0);
constexpr phase4::engine::common::Bitboard SPARSE_BOARD(m1 &m2);
constexpr phase4::engine::common::Bitboard DENSE_BOARD(m1 ^ m2);
} //namespace

TEST_CASE("MovesGenerator getKnightMoves") {
	using namespace phase4::engine::common;
	using namespace phase4::engine::moves;

	//                                                    ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
	//                                                    88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
	CHECK(MovesGenerator::getKnightMoves(Square::H1) == 0b00000000'00000000'00000000'00000000'00000000'00000010'00000100'00000000);
	CHECK(MovesGenerator::getKnightMoves(Square::G1) == 0b00000000'00000000'00000000'00000000'00000000'00000101'00001000'00000000);
	CHECK(MovesGenerator::getKnightMoves(Square::G2) == 0b00000000'00000000'00000000'00000000'00000101'00001000'00000000'00001000);
	CHECK(MovesGenerator::getKnightMoves(Square::D3) == 0b00000000'00000000'00000000'00101000'01000100'00000000'01000100'00101000);
	CHECK(MovesGenerator::getKnightMoves(Square::A4) == 0b00000000'00000000'01000000'00100000'00000000'00100000'01000000'00000000);
	CHECK(MovesGenerator::getKnightMoves(Square::H5) == 0b00000000'00000010'00000100'00000000'00000100'00000010'00000000'00000000);
	CHECK(MovesGenerator::getKnightMoves(Square::E6) == 0b00010100'00100010'00000000'00100010'00010100'00000000'00000000'00000000);
	CHECK(MovesGenerator::getKnightMoves(Square::B7) == 0b00010000'00000000'00010000'10100000'00000000'00000000'00000000'00000000);
	CHECK(MovesGenerator::getKnightMoves(Square::G8) == 0b00000000'00001000'00000101'00000000'00000000'00000000'00000000'00000000);
}

TEST_CASE("MovesGenerator getBishopMoves") {
	using namespace phase4::engine::common;
	using namespace phase4::engine::moves;

	SUBCASE("Empty occupancy") {
		//                                                                 ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
		//                                                                 88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
		CHECK(MovesGenerator::getBishopMoves(EMPTY_BOARD, Square::H1) == 0b10000000'01000000'00100000'00010000'00001000'00000100'00000010'00000000);
		CHECK(MovesGenerator::getBishopMoves(EMPTY_BOARD, Square::G1) == 0b00000000'10000000'01000000'00100000'00010000'00001000'00000101'00000000);
		CHECK(MovesGenerator::getBishopMoves(EMPTY_BOARD, Square::G2) == 0b10000000'01000000'00100000'00010000'00001000'00000101'00000000'00000101);
		CHECK(MovesGenerator::getBishopMoves(EMPTY_BOARD, Square::D3) == 0b00000000'00000001'10000010'01000100'00101000'00000000'00101000'01000100);
		CHECK(MovesGenerator::getBishopMoves(EMPTY_BOARD, Square::A4) == 0b00001000'00010000'00100000'01000000'00000000'01000000'00100000'00010000);
		CHECK(MovesGenerator::getBishopMoves(EMPTY_BOARD, Square::H5) == 0b00001000'00000100'00000010'00000000'00000010'00000100'00001000'00010000);
		CHECK(MovesGenerator::getBishopMoves(EMPTY_BOARD, Square::E6) == 0b00100010'00010100'00000000'00010100'00100010'01000001'10000000'00000000);
		CHECK(MovesGenerator::getBishopMoves(EMPTY_BOARD, Square::B7) == 0b10100000'00000000'10100000'00010000'00001000'00000100'00000010'00000001);
		CHECK(MovesGenerator::getBishopMoves(EMPTY_BOARD, Square::G8) == 0b00000000'00000101'00001000'00010000'00100000'01000000'10000000'00000000);
	}

	SUBCASE("Sparse occupancy") {
		//                                                                  ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
		//                                                                  88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
		CHECK(MovesGenerator::getBishopMoves(SPARSE_BOARD, Square::H1) == 0b00000000'00000000'00000000'00010000'00001000'00000100'00000010'00000000);
		CHECK(MovesGenerator::getBishopMoves(SPARSE_BOARD, Square::G1) == 0b00000000'00000000'00000000'00000000'00000000'00000000'00000101'00000000);
		CHECK(MovesGenerator::getBishopMoves(SPARSE_BOARD, Square::G2) == 0b00000000'00000000'00000000'00010000'00001000'00000101'00000000'00000101);
		CHECK(MovesGenerator::getBishopMoves(SPARSE_BOARD, Square::D3) == 0b00000000'00000000'10000010'01000100'00101000'00000000'00101000'01000100);
		CHECK(MovesGenerator::getBishopMoves(SPARSE_BOARD, Square::A4) == 0b00001000'00010000'00100000'01000000'00000000'01000000'00100000'00010000);
		CHECK(MovesGenerator::getBishopMoves(SPARSE_BOARD, Square::H5) == 0b00000000'00000000'00000010'00000000'00000010'00000100'00001000'00010000);
		CHECK(MovesGenerator::getBishopMoves(SPARSE_BOARD, Square::E6) == 0b00100010'00010100'00000000'00010100'00000010'00000001'00000000'00000000);
		CHECK(MovesGenerator::getBishopMoves(SPARSE_BOARD, Square::B7) == 0b10100000'00000000'10100000'00010000'00000000'00000000'00000000'00000000);
		CHECK(MovesGenerator::getBishopMoves(SPARSE_BOARD, Square::G8) == 0b00000000'00000101'00001000'00010000'00000000'00000000'00000000'00000000);
	}

	SUBCASE("Dense occupancy") {
		//                                                                 ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
		//                                                                 88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
		CHECK(MovesGenerator::getBishopMoves(DENSE_BOARD, Square::H1) == 0b00000000'00000000'00000000'00000000'00000000'00000100'00000010'00000000);
		CHECK(MovesGenerator::getBishopMoves(DENSE_BOARD, Square::G1) == 0b00000000'00000000'00000000'00000000'00010000'00001000'00000101'00000000);
		CHECK(MovesGenerator::getBishopMoves(DENSE_BOARD, Square::G2) == 0b00000000'00000000'00000000'00000000'00000000'00000101'00000000'00000101);
		CHECK(MovesGenerator::getBishopMoves(DENSE_BOARD, Square::D3) == 0b00000000'00000000'00000000'01000000'00101000'00000000'00101000'00000000);
		CHECK(MovesGenerator::getBishopMoves(DENSE_BOARD, Square::A4) == 0b00000000'00000000'00000000'01000000'00000000'01000000'00100000'00000000);
		CHECK(MovesGenerator::getBishopMoves(DENSE_BOARD, Square::H5) == 0b00000000'00000100'00000010'00000000'00000010'00000100'00000000'00000000);
		CHECK(MovesGenerator::getBishopMoves(DENSE_BOARD, Square::E6) == 0b00000000'00010100'00000000'00010100'00100000'01000000'10000000'00000000);
		CHECK(MovesGenerator::getBishopMoves(DENSE_BOARD, Square::B7) == 0b10100000'00000000'10100000'00000000'00000000'00000000'00000000'00000000);
		CHECK(MovesGenerator::getBishopMoves(DENSE_BOARD, Square::G8) == 0b00000000'00000101'00000000'00000000'00000000'00000000'00000000'00000000);
	}
}

TEST_CASE("MovesGenerator getRookMoves") {
	using namespace phase4::engine::common;
	using namespace phase4::engine::moves;

	SUBCASE("Empty occupancy") {
		//                                                               ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
		//                                                               88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
		CHECK(MovesGenerator::getRookMoves(EMPTY_BOARD, Square::H1) == 0b00000001'00000001'00000001'00000001'00000001'00000001'00000001'11111110);
		CHECK(MovesGenerator::getRookMoves(EMPTY_BOARD, Square::G1) == 0b00000010'00000010'00000010'00000010'00000010'00000010'00000010'11111101);
		CHECK(MovesGenerator::getRookMoves(EMPTY_BOARD, Square::G2) == 0b00000010'00000010'00000010'00000010'00000010'00000010'11111101'00000010);
		CHECK(MovesGenerator::getRookMoves(EMPTY_BOARD, Square::D3) == 0b00010000'00010000'00010000'00010000'00010000'11101111'00010000'00010000);
		CHECK(MovesGenerator::getRookMoves(EMPTY_BOARD, Square::A4) == 0b10000000'10000000'10000000'10000000'01111111'10000000'10000000'10000000);
		CHECK(MovesGenerator::getRookMoves(EMPTY_BOARD, Square::H5) == 0b00000001'00000001'00000001'11111110'00000001'00000001'00000001'00000001);
		CHECK(MovesGenerator::getRookMoves(EMPTY_BOARD, Square::E6) == 0b00001000'00001000'11110111'00001000'00001000'00001000'00001000'00001000);
		CHECK(MovesGenerator::getRookMoves(EMPTY_BOARD, Square::B7) == 0b01000000'10111111'01000000'01000000'01000000'01000000'01000000'01000000);
		CHECK(MovesGenerator::getRookMoves(EMPTY_BOARD, Square::G8) == 0b11111101'00000010'00000010'00000010'00000010'00000010'00000010'00000010);
	}

	SUBCASE("Sparse occupancy") {
		//                                                               ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
		//                                                               88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
		CHECK(MovesGenerator::getRookMoves(SPARSE_BOARD, Square::H1) == 0b0000000'00000000'00000000'10000000'10000000'10000000'10000000'100001110);
		CHECK(MovesGenerator::getRookMoves(SPARSE_BOARD, Square::G1) == 0b0000000'00000000'00000001'00000001'00000001'00000001'00000001'000001101);
		CHECK(MovesGenerator::getRookMoves(SPARSE_BOARD, Square::G2) == 0b0000000'00000000'00000001'00000001'00000001'00000001'00000010'100000010);
		CHECK(MovesGenerator::getRookMoves(SPARSE_BOARD, Square::D3) == 0b0000000'00000000'00000000'00001000'00001000'00010111'10001000'000010000);
		CHECK(MovesGenerator::getRookMoves(SPARSE_BOARD, Square::A4) == 0b1000000'01000000'01000000'01000000'00111110'01000000'00000000'000000000);
		CHECK(MovesGenerator::getRookMoves(SPARSE_BOARD, Square::H5) == 0b0000000'00000000'00000000'10001111'00000000'10000000'10000000'100000001);
		CHECK(MovesGenerator::getRookMoves(SPARSE_BOARD, Square::E6) == 0b0000100'00000100'00111010'00000100'00000100'00000100'00000100'000001000);
		CHECK(MovesGenerator::getRookMoves(SPARSE_BOARD, Square::B7) == 0b0100000'01011111'00100000'00000000'00000000'00000000'00000000'000000000);
		CHECK(MovesGenerator::getRookMoves(SPARSE_BOARD, Square::G8) == 0b0011110'10000001'00000000'00000000'00000000'00000000'00000000'000000000);
	}

	SUBCASE("Dense occupancy") {
		//                                                               ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
		//                                                               88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
		CHECK(MovesGenerator::getRookMoves(DENSE_BOARD, Square::H1) == 0b00000000'00000000'00000000'00000000'00000000'00000000'00000001'00000010);
		CHECK(MovesGenerator::getRookMoves(DENSE_BOARD, Square::G1) == 0b00000000'00000000'00000000'00000000'00000000'00000010'00000010'00000101);
		CHECK(MovesGenerator::getRookMoves(DENSE_BOARD, Square::G2) == 0b00000000'00000000'00000000'00000000'00000000'00000010'00001101'00000010);
		CHECK(MovesGenerator::getRookMoves(DENSE_BOARD, Square::D3) == 0b00000000'00000000'00000000'00000000'00010000'11101100'00010000'00000000);
		CHECK(MovesGenerator::getRookMoves(DENSE_BOARD, Square::A4) == 0b00000000'00000000'00000000'10000000'01000000'10000000'10000000'10000000);
		CHECK(MovesGenerator::getRookMoves(DENSE_BOARD, Square::H5) == 0b00000000'00000001'00000001'00000010'00000001'00000000'00000000'00000000);
		CHECK(MovesGenerator::getRookMoves(DENSE_BOARD, Square::E6) == 0b00000000'00001000'00110111'00001000'00000000'00000000'00000000'00000000);
		CHECK(MovesGenerator::getRookMoves(DENSE_BOARD, Square::B7) == 0b01000000'10100000'01000000'01000000'00000000'00000000'00000000'00000000);
		CHECK(MovesGenerator::getRookMoves(DENSE_BOARD, Square::G8) == 0b00000101'00000010'00000010'00000010'00000000'00000000'00000000'00000000);
	}
}

TEST_CASE("MovesGenerator getQueenMoves") {
	using namespace phase4::engine::common;
	using namespace phase4::engine::moves;

	SUBCASE("Empty occupancy") {
		//                                                                ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
		//                                                                88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
		CHECK(MovesGenerator::getQueenMoves(EMPTY_BOARD, Square::H1) == 0b10000001'01000001'00100001'00010001'00001001'00000101'00000011'11111110);
		CHECK(MovesGenerator::getQueenMoves(EMPTY_BOARD, Square::G1) == 0b00000010'10000010'01000010'00100010'00010010'00001010'00000111'11111101);
		CHECK(MovesGenerator::getQueenMoves(EMPTY_BOARD, Square::G2) == 0b10000010'01000010'00100010'00010010'00001010'00000111'11111101'00000111);
		CHECK(MovesGenerator::getQueenMoves(EMPTY_BOARD, Square::D3) == 0b00010000'00010001'10010010'01010100'00111000'11101111'00111000'01010100);
		CHECK(MovesGenerator::getQueenMoves(EMPTY_BOARD, Square::A4) == 0b10001000'10010000'10100000'11000000'01111111'11000000'10100000'10010000);
		CHECK(MovesGenerator::getQueenMoves(EMPTY_BOARD, Square::H5) == 0b00001001'00000101'00000011'11111110'00000011'00000101'00001001'00010001);
		CHECK(MovesGenerator::getQueenMoves(EMPTY_BOARD, Square::E6) == 0b00101010'00011100'11110111'00011100'00101010'01001001'10001000'00001000);
		CHECK(MovesGenerator::getQueenMoves(EMPTY_BOARD, Square::B7) == 0b11100000'10111111'11100000'01010000'01001000'01000100'01000010'01000001);
		CHECK(MovesGenerator::getQueenMoves(EMPTY_BOARD, Square::G8) == 0b11111101'00000111'00001010'00010010'00100010'01000010'10000010'00000010);
	}

	SUBCASE("Sparse occupancy") {
		//                                                                ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
		//                                                                88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
		CHECK(MovesGenerator::getQueenMoves(SPARSE_BOARD, Square::H1) == 0b0000000'00000000'00000000'10001000'10000100'10000010'10000001'100001110);
		CHECK(MovesGenerator::getQueenMoves(SPARSE_BOARD, Square::G1) == 0b0000000'00000000'00000001'00000001'00000001'00000001'00000011'100001101);
		CHECK(MovesGenerator::getQueenMoves(SPARSE_BOARD, Square::G2) == 0b0000000'00000000'00000001'00001001'00000101'00000011'10000010'100000111);
		CHECK(MovesGenerator::getQueenMoves(SPARSE_BOARD, Square::D3) == 0b0000000'00000000'01000001'00101010'00011100'00010111'10011100'001010100);
		CHECK(MovesGenerator::getQueenMoves(SPARSE_BOARD, Square::A4) == 0b1000100'01001000'01010000'01100000'00111110'01100000'00010000'000010000);
		CHECK(MovesGenerator::getQueenMoves(SPARSE_BOARD, Square::H5) == 0b0000000'00000000'00000001'10001111'00000001'10000010'10000100'100010001);
		CHECK(MovesGenerator::getQueenMoves(SPARSE_BOARD, Square::E6) == 0b0010101'00001110'00111010'00001110'00000101'00000100'10000100'000001000);
		CHECK(MovesGenerator::getQueenMoves(SPARSE_BOARD, Square::B7) == 0b1110000'01011111'01110000'00001000'00000000'00000000'00000000'000000000);
		CHECK(MovesGenerator::getQueenMoves(SPARSE_BOARD, Square::G8) == 0b0011110'10000011'10000100'00001000'00000000'00000000'00000000'000000000);
	}

	SUBCASE("Dense occupancy") {
		//                                                                ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
		//                                                                88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
		CHECK(MovesGenerator::getQueenMoves(DENSE_BOARD, Square::H1) == 0b00000000'00000000'00000000'00000000'00000000'00000100'00000011'00000010);
		CHECK(MovesGenerator::getQueenMoves(DENSE_BOARD, Square::G1) == 0b00000000'00000000'00000000'00000000'00010000'00001010'00000111'00000101);
		CHECK(MovesGenerator::getQueenMoves(DENSE_BOARD, Square::G2) == 0b00000000'00000000'00000000'00000000'00000000'00000111'00001101'00000111);
		CHECK(MovesGenerator::getQueenMoves(DENSE_BOARD, Square::D3) == 0b00000000'00000000'00000000'01000000'00111000'11101100'00111000'00000000);
		CHECK(MovesGenerator::getQueenMoves(DENSE_BOARD, Square::A4) == 0b00000000'00000000'00000000'11000000'01000000'11000000'10100000'10000000);
		CHECK(MovesGenerator::getQueenMoves(DENSE_BOARD, Square::H5) == 0b00000000'00000101'00000011'00000010'00000011'00000100'00000000'00000000);
		CHECK(MovesGenerator::getQueenMoves(DENSE_BOARD, Square::E6) == 0b00000000'00011100'00110111'00011100'00100000'01000000'10000000'00000000);
		CHECK(MovesGenerator::getQueenMoves(DENSE_BOARD, Square::B7) == 0b11100000'10100000'11100000'01000000'00000000'00000000'00000000'00000000);
		CHECK(MovesGenerator::getQueenMoves(DENSE_BOARD, Square::G8) == 0b00000101'00000111'00000010'00000010'00000000'00000000'00000000'00000000);
	}
}

TEST_CASE("MovesGenerator getKingMoves") {
	using namespace phase4::engine::common;
	using namespace phase4::engine::moves;

	//                                                  ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH ABCDEFGH
	//                                                  88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111
	CHECK(MovesGenerator::getKingMoves(Square::H1) == 0b00000000'00000000'00000000'00000000'00000000'00000000'00000011'00000010);
	CHECK(MovesGenerator::getKingMoves(Square::G1) == 0b00000000'00000000'00000000'00000000'00000000'00000000'00000111'00000101);
	CHECK(MovesGenerator::getKingMoves(Square::G2) == 0b00000000'00000000'00000000'00000000'00000000'00000111'00000101'00000111);
	CHECK(MovesGenerator::getKingMoves(Square::D3) == 0b00000000'00000000'00000000'00000000'00111000'00101000'00111000'00000000);
	CHECK(MovesGenerator::getKingMoves(Square::A4) == 0b00000000'00000000'00000000'11000000'01000000'11000000'00000000'00000000);
	CHECK(MovesGenerator::getKingMoves(Square::H5) == 0b00000000'00000000'00000011'00000010'00000011'00000000'00000000'00000000);
	CHECK(MovesGenerator::getKingMoves(Square::E6) == 0b00000000'00011100'00010100'00011100'00000000'00000000'00000000'00000000);
	CHECK(MovesGenerator::getKingMoves(Square::B7) == 0b11100000'10100000'11100000'00000000'00000000'00000000'00000000'00000000);
	CHECK(MovesGenerator::getKingMoves(Square::G8) == 0b00000101'00000111'00000000'00000000'00000000'00000000'00000000'00000000);
}
